<h1><?php echo $this->escape($this->title); ?></h1>
<div id="articletext">
    <div class="illustration right half"><img alt="Understanding Progressive Enhancement" src="/d/understandingprogressiveenhancement/progressive-enhancement.jpg">
    </div>

    <p>Since 1994, the web development community has beaten <a href="http://en.wikipedia.org/wiki/Graceful_degradation">graceful degradation</a>’s drum. A carry-over from the engineering world, the concept was, at its core, about giving the latest and greatest browsers the full-course meal experience while tossing a few scraps to the sad folk unfortunate enough to be using Netscape 4. It worked, sure, but it didn’t really match Tim Berners-Lee’s original vision for a universally accessible web.</p>

    <p>About a decade later, several smart folks began to question graceful degradation and found it lacking on many levels. Concerned with content availability, overall accessibility, and mobile browser capabilities, they sought a new way to approach web development&mdash;a way that focused on the content and did more than just pay lip service to older devices. </p>

    <p>At <span class="caps"><span class="caps">SXSW</span></span> in 2003, Steve Champeon and Nick Finck gave a presentation titled “<a href="http://www.hesketh.com/thought-leadership/our-publications/inclusive-web-design-future">Inclusive Web Design For the Future</a>.” There, they unveiled a blueprint for this new way of approaching web development. Steve also gave it a name: <a href="http://en.wikipedia.org/wiki/Progressive_enhancement">progressive enhancement</a>.</p>

    <h2>There’s a (subtle) difference</h2>

    <p>In case you are scratching your head, trying to see how graceful degradation and progressive enhancement differ, I’ll say this: it’s a matter of perspective. Both graceful degradation and progressive enhancement consider how well a site works in a variety of browsers on a variety of devices. The key is where they place their focus and how this affects workflow.</p>

    <h3>The graceful degradation perspective</h3>

    <p>Graceful degradation focuses on building the website for the most advanced/capable browsers. Testing in browsers deemed “older” or less capable usually takes place during the last quarter of the development cycle and is often restricted to the previous release of the major browsers (IE, Mozilla, etc.).</p>

    <p>Under this paradigm, older browsers are expected to have a poor, but passable experience. Small fixes may be made to accommodate a particular browser. Because they are not the focus, little attention is paid beyond fixing the most egregious errors.</p>

    <h3>The progressive enhancement perspective</h3>

    <p>Progressive enhancement focuses on the content. Note the difference: <em>I didn’t even mention browsers</em>.</p>

    <p>Content is the reason we create websites to begin with. Some sites disseminate it, some collect it, some request it, some manipulate it, and some even do all of the above, but they all require it. That’s what makes progressive enhancement a more appropriate paradigm. It’s why Yahoo! swiftly adopted it and used it to create their <a href="http://developer.yahoo.com/yui/articles/gbs/">Graded Browser Support</a> strategy.</p>

    <h2>So how does it work?</h2>

    <p>Getting into the progressive enhancement mindset is quite simple: just think from the content out. The content forms the solid base on which you layer your style and interactivity. If you’re a candy fan, think of it as a Peanut M&amp;M:</p>

    <div class="illustration full left"><img class="illustration_full" alt="" src="/d/understandingprogressiveenhancement/m-m.jpg"><p>The Chocolatey Layers of Progressive Enhancement</p></div>

    <p>Start with your content peanut, marked up in rich, semantic (X)HTML. Coat that content with a layer of rich, creamy <span class="caps"><span class="caps">CSS</span></span>. Finally, add JavaScript as the hard candy shell to make a wonderfully tasty treat (and keep it from melting in your hands).</p>

    <p>If you’re at all familiar with the web standards movement’s mantra&mdash;separation, separation, separation&mdash;this makes perfect sense. Web standards-based development has often been likened to <a href="http://www.flickr.com/photos/aarongustafson/83123599/">a layer cake</a> (or, if you want to get really fancy, <a href="http://www.stuffandnonsense.co.uk/archives/web_standards_trifle.html">a trifle</a>).</p> 

    <p>I prefer the Peanut M&amp;M analogy, because in it, the layers envelop the content completely, in much the same way our styles and scripts wrap our content.</p>

    <p>If you’ll indulge my food analogy a bit longer (I hope I’m not making you hungry), I’ll explain why this approach is better and how the layers interact within this paradigm.</p>

    <h3>The peanut</h3>

    <p>Some people like peanuts; in fact, some people prefer peanuts to Peanut M&amp;Ms. Similarly, some folks (and things like search engine spiders) want just the content.</p>

    <p>Then there are folks who can’t handle the chocolate and candy layers on top of the peanut (diabetics, for example). Like them, people on mobile devices or older browsers may not be able to see your pretty design or interact with your slick Ajax-driven interface.</p>

    <p>Making sure your markup conveys the greatest level of detail about the content it wraps around is essential to offering a basic experience to these users.</p>

    <h3>The chocolate coating</h3>

    <p>Next, you can delicately dip your content into a warm bath of ambrosial <span class="caps"><span class="caps">CSS</span></span>&mdash;but before you jump to the hard candy shell, there are some additional considerations.</p>

    <p>There are folks who love chocolate covered peanuts. These folks are like the middle tier of users who have some level of <span class="caps"><span class="caps">CSS</span></span> support, but may not have decent JavaScript support. Or they may work at a company where the IT security folks are more than a little phobic about JavaScript. For them, JavaScript may be disabled entirely.</p>

    <p>Whether <a href="http://en.wikipedia.org/wiki/Chocolate-coated_peanut">Goober</a>-inclined or <a href="http://en.wikipedia.org/wiki/Chocolate-coated_peanut">Goober</a>-limited, these folks deserve to be catered to. There are several progressively-enhanced ways to apply styles to your content, and they will be the topic of the second article in this series.</p>

    <h3>The hard candy shell</h3>

    <p>Finally, you can introduce JavaScript into the mix. With the rich interaction possibilities it provides, as well as its ability to manipulate and interact with the content and presentation layers, JavaScript really is the ingredient that can pull a site together into an “experience.”</p>

    <p>I’m not sure exactly how the hard candy shell is added to an M&amp;M (my guess is that it’s another dip of some sort), but adding JavaScript-based functionality and interactivity to your websites is a breeze when you think progressive enhancement. And, in much the same way as M&amp;Ms are available in a variety of colors, the JavaScript experience can vary based on the capabilities of the browser or device attempting to use it.</p>

    <p>As you probably know, this type of development is called unobtrusive JavaScript. I’ll cover those techniques and practices in the third and final article in this series.</p>

    <h2>Putting it all together</h2>

    <p>Developing with progressive enhancement is actually quite simple once you understand the concept and begin putting it into practice; perhaps even simpler than making candy. The next two articles in this series will help you hone your progressive enhancement skills with <span class="caps"><span class="caps">CSS</span></span> and JavaScript, and will show you how the philosophy translates into code.<img id="eoai" alt="" src="/pix/eoai.gif"></p>

    <div id="credits"> 
        <ul>
            <li>Illustration by <a href="/authors/c/kevincornell">Kevin Cornell</a></li> 
        </ul> 
    </div>

</div>
